### Global Options
directory: G:\Artists
plugins:
    # Autotagger Extensions
    - fromfilename
    # Metadata Plugins
    #- lyrics
    - lastgenre
    - mbsync
    #- discogs
    - mbsubmit
    # Path Format Plugins
    - bucket
    - inline
    # Interoperability
    - badfiles
    # Miscellaneous Plugins
    - info
    - missing
    - duplicates
    # Other/External Plugins
    - extrafiles
    - mbsubmit

threaded: yes

per_disc_numbering: true

# General Configuration
import:
    write: yes
    copy: no
    move: yes
    timid: yes

ui:
    color: no

match:
    strong_rec_thresh: 0.10
    preferred:
        countries: ["US", "GB|UK"]
        media: ["CD", "Digital Media|File", "Vinyl"]
        original_year: yes

original_date: yes

paths:
    default: %bucket{$albumartist,alpha}/$albumartist/$album ($year)%if{$bettercatalognum, {$bettercatalognum$}} [%if{$iscd,$mediatype - $logpercent - $format,%if{$mediatype,$mediatype - }$format - %if{$bitdepth,$bitdepthmost,$mp3_quality} - $sampleratemost}]/$disc-$track. $title
    singleton: %bucket{$artist,alpha}/$artist/$title ($year)%if{$bettercatalognum, {$bettercatalognum$}} [%if{$iscd,$mediatype - $logpercent - $format,%if{$mediatype,$mediatype - }$format - %if{$bitdepth,$bitdepthmost,$mp3_quality} - $sampleratemost}]/$title
    comp: VA/$album ($year)%if{$bettercatalognum, {$bettercatalognum$}} [%if{$iscd,$mediatype - $logpercent - $format,%if{$mediatype,$mediatype - }$format - %if{$bitdepth,$bitdepthmost,$mp3_quality} - $sampleratemost}]/$disc-$track. $artist - $title

bucket:
    bucket_alpha:
        - "#-!"
        - "0-9"
        - "A"
        - "B"
        - "C"
        - "D"
        - "E"
        - "F"
        - "G"
        - "H"
        - "I"
        - "J"
        - "K"
        - "L"
        - "M"
        - "N"
        - "O"
        - "P"
        - "Q"
        - "R"
        - "S"
        - "T"
        - "U"
        - "V"
        - "W"
        - "X"
        - "Y"
        - "Z"
    bucket_alpha_regex:
        "#-!": ^[^0-9a-zA-Z]
    bucket_year: []
    extrapolate: no

clutter: ["Thumbs.DB", ".DS_Store", "*.m3u", "*.m3u8", "*.sfv", ".pls"]

extrafiles:
    patterns:
        artworkdir:
            - "[aA]rtwork/"
            - "[aA]rtworks/"
            - "[aA]rt/"
            - "[cC]overs/"
        scansdir:
            - "[sS]cans/"
        extradir:
            - "[eE]xtra/"
        everythingelse:
            - "*.*"
            - "*/*.*"
            - "*/*/*.*"
            - "*/*/*/*.*"
    paths:
        artworkdir: $albumpath/Artwork
        scansdir: $albumpath/Scans
        extradir: $albumpath/Extra
        everythingelse: $albumpath/$filename

lastgenre:
    count: 5

item_fields:
    logpercent: |
        import os
        import subprocess
        import tempfile

        # change this path to where you keep logchecker
        logcheckerpath = "C:/Users/toad/AppData/Roaming/beets/logchecker.phar"

        temp_log = os.path.join(tempfile.gettempdir(), "beetslastlog.txt")
        if os.path.isfile(temp_log):
            line = ""
            with open(temp_log, 'r') as f:
                line = f.readline()
            if track >= tracktotal:
                os.remove(temp_log)
            return line + "%LOG"
        else:
            log_scores = []
            for root, dirs, files in os.walk(os.path.dirname(path.decode("utf-8"))):
                for file in files:
                    if file.endswith(".log"):
                        log_file = os.path.join(root, file)
                        proc = subprocess.Popen(
                            ["php", logcheckerpath, "analyze", "--no_text", log_file],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                        )

                        log_checker_out = (
                            proc.communicate()[0].decode("utf-8").replace("\n", "")
                        )
                        i_score = log_checker_out.index("Score") + 10
                        i_check = log_checker_out.index("Checksum:")
                        sliced_text = slice(i_score, i_check)
                        log_score = int(log_checker_out[sliced_text].strip())

                        log_scores.append(log_score)
            score = min(log_scores, default="MISSING")
            with open(temp_log, 'w') as f:
                f.write(str(score))
            return str(score) + "%LOG"

album_fields:
    iscd: |
        return "CD" in items[0].media
    mediatype: |
        mediaList = {
            '12" Vinyl': "Vinyl",
            '7" Vinyl': "Vinyl",
            "Digital Media": "WEB",
        }
        try:
            return mediaList[items[0].media]
        except KeyError:
            return items[0].media
    bitdepthmost: |
        bitdepths = dict()
        for item in items:
            try:
                bitdepths[item.bitdepth] += 1
            except KeyError:
                bitdepths[item.bitdepth] = 1
        sorted_depths = {k: v for k, v in sorted(bitdepths.items(), key=lambda item: item[1])}
        return list(sorted_depths)[-1]
    sampleratemost: |
        samplerates = dict()
        for item in items:
            try:
                samplerates[item.samplerate] += 1
            except KeyError:
                samplerates[item.samplerate] = 1
        sorted_rates = {k: v for k, v in sorted(samplerates.items(), key=lambda item: item[1])}
        formatted_num = int(list(sorted_rates)[-1]/1000) if int(list(sorted_rates)[-1]/1000) == float(list(sorted_rates)[-1]/1000) else float(list(sorted_rates)[-1]/1000)
        return str(formatted_num) + "kHz"
    bettercatalognum: |
        return items[0].catalognum if items[0].catalognum != "[none]" else ""
    mp3_quality: |
        if items[0].format.upper() == "MP3":
            total_bitrate = 0
            for item in items:
                total_bitrate += item.bitrate
            average_bitrate = total_bitrate / len(items) / 1000
            if average_bitrate == 320:
                return "320"
            elif average_bitrate == 192:
                return "192"
            elif average_bitrate == 160:
                return "160"
            elif average_bitrate == 128:
                return "128"
            elif average_bitrate >= 200:
                return "V0"
            else:
                return "TOO LOW FIND NEW SOURCE"
        else:
            return items[0].format
