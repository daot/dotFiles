### Global Options
directory: E:\Artists\
plugins:
    # Autotagger Extensions
    - fromfilename
    - zero
    # Metadata Plugins
    - lyrics
    - lastgenre
    - mbsync
    - bandcamp
    #- discogs
    - mbsubmit
    # Path Format Plugins
    - bucket
    - inline
    # Interoperability
    - badfiles
    # Miscellaneous Plugins
    - info
    - missing
    - duplicates
    # Other/External Plugins
    - extrafiles
    - mbsubmit

threaded: yes

per_disc_numbering: true

# General Configuration
import:
    write: yes
    copy: no
    move: yes
    timid: yes
    
ui:
    color: no
    
match:
    strong_rec_thresh: 0.10
    preferred:
        countries: ['US', 'GB|UK']
        media: ['CD', 'Digital Media|File', 'Vinyl']
        original_year: yes

original_date: yes

paths:
    default: %bucket{$albumartist,alpha}/$albumartist/$album ($year) [%if{$mediatype,$mediatype - }$format - %if{$bitdepth,$bitdepthmost,$mp3_quality} - $sampleratemost] %if{$bettercatalognum,{$bettercatalognum$}}/$disc-$track. $title
    singleton: %bucket{$artist,alpha}/$artist/$title ($year) [%if{$mediatype,$mediatype - }$format - %if{$bitdepth,$bitdepthmost,$mp3_quality} - $sampleratemost] %if{$bettercatalognum,{$bettercatalognum$}}/$title
    comp: VA/$album ($year) [%if{$mediatype,$mediatype - }$format - %if{$bitdepth,$bitdepthmost,$mp3_quality} - $sampleratemost] %if{$bettercatalognum,{$bettercatalognum$}}/$disc-$track. $artist - $title

bucket:
    bucket_alpha:
    - '#-!'
    - '0-9'
    - 'A'
    - 'B'
    - 'C'
    - 'D'
    - 'E'
    - 'F'
    - 'G'
    - 'H'
    - 'I'
    - 'J'
    - 'K'
    - 'L'
    - 'M'
    - 'N'
    - 'O'
    - 'P'
    - 'Q'
    - 'R'
    - 'S'
    - 'T'
    - 'U'
    - 'V'
    - 'W'
    - 'X'
    - 'Y'
    - 'Z'
    bucket_alpha_regex:
        '#-!': ^[^0-9a-zA-Z]
    bucket_year: []
    extrapolate: no

clutter: ["Thumbs.DB", ".DS_Store", "*.m3u", "*.m3u8", "*.sfv", ".pls"]

extrafiles:
    patterns:
        artworkdir:
          - '[aA]rtwork/'
          - '[aA]rtworks/'
          - '[aA]rt/'
          - '[cC]overs/'
        scansdir:
          - '[sS]cans/'
        extradir:
          - '[eE]xtra/'
        everythingelse:
          - '*.*'
          - '*/*.*'
          - '*/*/*.*'
          - '*/*/*/*.*'
    paths:
        artworkdir: $albumpath/Artwork
        scansdir: $albumpath/Scans
        extradir: $albumpath/Extra
        everythingelse: $albumpath/$filename

lastgenre:
    count: 5

album_fields:
    mediatype: |
        mediaList = {
            '12" Vinyl': "Vinyl",
            '7" Vinyl': "Vinyl",
            "Digital Media": "WEB",
        }
        try:
            return mediaList[items[0].media]
        except KeyError:
            return items[0].media
    bitdepthmost: |
        bitdepths = dict()
        for item in items:
            try:
                bitdepths[item.bitdepth] += 1
            except KeyError:
                bitdepths[item.bitdepth] = 1
        sorted_depths = {k: v for k, v in sorted(bitdepths.items(), key=lambda item: item[1])}
        return list(sorted_depths)[-1]
    sampleratemost: |
        samplerates = dict()
        for item in items:
            try:
                samplerates[item.samplerate] += 1
            except KeyError:
                samplerates[item.samplerate] = 1
        sorted_rates = {k: v for k, v in sorted(samplerates.items(), key=lambda item: item[1])}
        formatted_num = int(list(sorted_rates)[-1]/1000) if int(list(sorted_rates)[-1]/1000) == float(list(sorted_rates)[-1]/1000) else float(list(sorted_rates)[-1]/1000)
        return str(formatted_num) + "kHz"
    bettercatalognum: |
        return items[0].catalognum if items[0].catalognum != "[none]" else ""
    mp3_quality: |
        if items[0].format.upper() == "MP3":
            total_bitrate = 0
            for item in items:
                total_bitrate += item.bitrate
            average_bitrate = total_bitrate / len(items) / 1000
            if average_bitrate == 320:
                return "320"
            elif average_bitrate == 192:
                return "192"
            elif average_bitrate == 160:
                return "160"
            elif average_bitrate == 128:
                return "128"
            elif average_bitrate >= 200:
                return "V0"
            else:
                return "TOO LOW FIND NEW SOURCE"
        else:
            return items[0].format

zero:
    keep_fields: title artist album albumartist year track disc lyrics itunesadvisory genre genres mb_trackid mb_albumid mb_artistid mb_albumartistid mb_releasegroupid
    update_database: true

bandcamp:
    lyrics: true
    art: false
